-- 1
-- PLPGSQL
CREATE OR REPLACE FUNCTION p_empDept(dept INTEGER)
RETURNS SETOF RECORD AS $$
	BEGIN
		RETURN QUERY(SELECT EMPNO, ENAME FROM EMP WHERE DEPTNO = dept);
	END
$$ LANGUAGE plpgsql;
-- LA CONSULTA ES ...
SELECT * FROM p_empDept(10) AS (CODIGO INTEGER, EMPLEADO VARCHAR);
-- O...
SELECT CODIGO FROM p_empDept(10) AS (CODIGO INTEGER, EMPLEADO VARCHAR);
-- 2
-- SQL
CREATE OR REPLACE FUNCTION s_insertDept(deptno INTEGER, dname VARCHAR, loc VARCHAR)
RETURNS VOID AS $$
	INSERT INTO DEPT(DEPTNO, DNAME, LOC) VALUES(deptno, dname, loc);
$$ LANGUAGE sql;
-- 3
-- SQL
CREATE OR REPLACE FUNCTION s_modDept(deptno INTEGER, loc VARCHAR)
RETURNS VOID AS $$
	UPDATE DEPT SET LOC=loc WHERE DEPTNO = deptno;
$$ LANGUAGE sql;
-- 4
-- PLPGSQL
CREATE OR REPLACE FUNCTION s_salPlus(cDname VARCHAR)
RETURNS VOID AS $$
	DECLARE
		comNew NUMERIC;
		salNew NUMERIC;
		com3000 NUMERIC;
		r RECORD;
	BEGIN
		FOR r IN (SELECT EMPNO, SAL, COMM FROM EMP E JOIN DEPT D ON E.DEPTNO = D.DEPTNO WHERE D.DNAME LIKE cDname)
		LOOP
			IF r.COMM IS NULL THEN
				IF (r.SAL + 200) > 3000 THEN
					com3000 = (r.SAL * 10) / 100;
					UPDATE EMP SET COMM = com3000 WHERE EMPNO = r.EMPNO;
				ELSE
					UPDATE EMP SET COMM = 200 WHERE EMPNO = r.EMPNO;
				END IF;
			ELSE
				comNew = r.COMM + ((r.COMM * 5) / 100);
				salNew = r.SAL + ((r.SAL * 5) / 100);
				UPDATE EMP SET COMM = comNew, SAL = salNew WHERE EMPNO = r.EMPNO;
			END IF;
		END LOOP;
	END
$$ LANGUAGE plpgsql;
